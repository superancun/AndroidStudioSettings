<application>
  <component name="AppStorage">
    <histories>
      <item value="Column has various properties to control how it sizes itself and how it positions its children. Here we use mainAxisAlignment to center the children vertically; the main axis here is the vertical axis because Columns are vertical (the cross axis would be horizontal)." />
      <item value="Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code) to see the wireframe for each widget." />
      <item value="Column is also a layout widget. It takes a list of children and arranges them vertically. By default, it sizes itself to fit its children horizontally, and tries to be as tall as its parent." />
      <item value="Center is a layout widget. It takes a single child and positions it in the middle of the parent." />
      <item value="Here we take the value from the MyHomePage object that was created by the App.build method, and use it to set our appbar title." />
      <item value="This method is rerun every time setState is called, for instance as done by the _incrementCounter method above. The Flutter framework has been optimized to make rerunning build methods fast, so that you can just rebuild anything that needs updating rather than having to individually change instances of widgets." />
      <item value="This call to setState tells the Flutter framework that something has changed in this State, which causes it to rerun the build method below so that the display can reflect the updated values. If we changed _counter without calling setState(), then the build method would not be called again, and so nothing would appear to happen." />
      <item value="This widget is the home page of your application. It is stateful, meaning that it has a State object (defined below) that contains fields that affect how it looks. This class is the configuration for the state. It holds the values (in this case the title) provided by the parent (in this case the App widget) and used by the build method of the State. Fields in a Widget subclass are always marked &quot;final&quot;." />
      <item value="This is the theme of your application. Try running your application with &quot;flutter run&quot;. You'll see the application has a blue toolbar. Then, without quitting the app, try changing the primarySwatch below to Colors.green and then invoke &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;, or simply save your changes to &quot;hot reload&quot; in a Flutter IDE). Notice that the counter didn't reset back to zero; the application is not restarted." />
      <item value="Flag for {@link setSystemUiVisibility(int)}: View would like its window to be laid out as if it has requested {@link SYSTEM_UI_FLAG_HIDE_NAVIGATION}, even if it currently hasn't. This allows it to avoid artifacts when switching in and out of that mode, at the expense that some of its user interface may be covered by screen decorations when they are shown. You can perform layout of your inner UI elements to account for the navigation system UI through the {@link fitSystemWindows(Rect)} method. @deprecated For floating windows, use {@link LayoutParamssetFitInsetsTypes(int)} with {@link TypenavigationBars()}. For non-floating windows that fill the screen, call {@link WindowsetDecorFitsSystemWindows(boolean)} with {@code false}." />
      <item value="Create an Observable by wrapping an ObservableSource &lt;em&gt;which has to be implemented according to the Reactive Streams based Observable specification by handling disposal correctly; no safeguards are provided by the Observable itself&lt;em&gt;. &lt;dl&gt; &lt;dt&gt;&lt;b&gt;Scheduler:&lt;b&gt;&lt;dt&gt; &lt;dd&gt;{@code unsafeCreate} by default doesn't operate on any particular {@link Scheduler}.&lt;dd&gt; &lt;dl&gt; @param &lt;T&gt; the value type emitted @param onSubscribe the ObservableSource instance to wrap @return the new Observable instance" />
      <item value="Returns a string having trailing characters from the [chars] array removed." />
      <item value="Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index {@code i} such that &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;tt&gt; (if such an element exists). Returns {@code true} if this list contained the specified element (or equivalently, if this list changed as a result of the call). @param o element to be removed from this list, if present @return {@code true} if this list contained the specified element" />
      <item value="Return the FragmentManager for interacting with fragments associated with this fragment's activity. Note that this will be non-null slightly before {@link getActivity()}, during the time from when the fragment is placed in a {@link FragmentTransaction} until it is committed and attached to its activity. &lt;p&gt;If this Fragment is a child of another Fragment, the FragmentManager returned here will be the parent's {@link getChildFragmentManager()}. @see getParentFragmentManager() @deprecated This has been removed in favor of &lt;code&gt;getParentFragmentManager()&lt;code&gt; which throws an {@link IllegalStateException} if the FragmentManager is null. Check if {@link isAdded()} returns &lt;code&gt;false&lt;code&gt; to determine if the FragmentManager is &lt;code&gt;null&lt;code&gt;." />
      <item value="Returns the thread group to which this thread belongs. This method returns null if this thread has died (been stopped)." />
      <item value="Create an implementation of the API endpoints defined by the {@code service} interface. &lt;p&gt;The relative path for a given method is obtained from an annotation on the method describing the request type. The built-in methods are {@link retrofit2.http.GET GET}, {@link retrofit2.http.PUT PUT}, {@link retrofit2.http.POST POST}, {@link retrofit2.http.PATCH PATCH}, {@link retrofit2.http.HEAD HEAD}, {@link retrofit2.http.DELETE DELETE} and {@link retrofit2.http.OPTIONS OPTIONS}. You can use a custom HTTP method with {@link HTTP @HTTP}. For a dynamic URL, omit the path on the annotation and annotate the first parameter with {@link Url @Url}. &lt;p&gt;Method parameters can be used to replace parts of the URL by annotating them with {@link retrofit2.http.Path @Path}. Replacement sections are denoted by an identifier surrounded by curly braces (e.g., &quot;{foo}&quot;). To add items to the query string of a URL use {@link retrofit2.http.Query @Query}. &lt;p&gt;The body of a request is denoted by the {@link retrofit2.http.Body @Body} annotation. The object will be converted to request representation by one of the {@link Converter.Factory} instances. A {@link RequestBody} can also be used for a raw representation. &lt;p&gt;Alternative request body formats are supported by method annotations and corresponding parameter annotations: &lt;ul&gt; &lt;li&gt;{@link retrofit2.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value pairs specified by the {@link retrofit2.http.Field @Field} parameter annotation. &lt;li&gt;{@link retrofit2.http.Multipart @Multipart} - RFC 2388-compliant multipart data with parts specified by the {@link retrofit2.http.Part @Part} parameter annotation. &lt;ul&gt; &lt;p&gt;Additional static headers can be added for an endpoint using the {@link retrofit2.http.Headers @Headers} method annotation. For per-request control over a header annotate a parameter with {@link Header @Header}. &lt;p&gt;By default, methods return a {@link Call} which represents the HTTP request. The generic parameter of the call is the response body type and will be converted by one of the {@link Converter.Factory} instances. {@link ResponseBody} can also be used for a raw representation. {@link Void} can be used if you do not care about the body contents." />
      <item value="Returns a modifiable list of interceptors that observe the full span of each call: from before the connection is established (if any) until after the response source is selected (either the origin server, cache, or both)." />
      <item value="Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing &quot;aa&quot; with &quot;b&quot; in the string &quot;aaa&quot; will result in &quot;ba&quot; rather than &quot;ab&quot;." />
      <item value="Set the alpha component of {@code color} to be {@code alpha}." />
      <item value="Return true if the fragment is in the resumed state. This is true for the duration of {@link onResume()} and {@link onPause()} as well." />
      <item value="Broadcast Action: The current time has changed. Sent every minute. You &lt;em&gt;cannot&lt;em&gt; receive this through components declared in manifests, only by explicitly registering for it with {@link ContextregisterReceiver(BroadcastReceiver, IntentFilter) Context.registerReceiver()}. &lt;p class=&quot;note&quot;&gt;This is a protected intent that can only be sent by the system." />
      <item value="Returns the {@link ColorStateList} from the given resource. The resource can include themeable attributes, regardless of API level. @param context context to inflate against @param resId the resource identifier of the ColorStateList to retrieve" />
      <item value="KEY REMAIN COUNT" />
      <item value="KEY Remain count" />
      <item value="@return true if this view could ask the Handler to remove the Runnable, false otherwise. When the returned value is true, the Runnable may or may not have been actually removed from the message queue (for instance, if the Runnable was not in the queue already.)" />
      <item value="@return {@link getBindingAdapterPosition()} @deprecated This method is confusing when adapters nest other adapters. If you are calling this in the context of an Adapter, you probably want to call {@link getBindingAdapterPosition()} or if you want the position as {@link RecyclerView} sees it, you should call {@link getAbsoluteAdapterPosition()}." />
      <item value="This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0." />
      <item value="This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. It is used to identify the local interface on which a multicast group is joined. Interfaces are normally known by names such as &quot;le0&quot;." />
      <item value="Android-note: NetworkInterface has been rewritten to avoid native code. Fix upstream bug not returning link-down interfaces. http:b26238832" />
      <item value="If the package id is 0x00 or 0x01, it's either an undefined package or a framework id" />
      <item value="Sets a tag associated with this view and a key. A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure. The specified key should be an id declared in the resources of the application to ensure it is unique (see the &lt;a href=&quot;{@docRoot}guidetopicsresourcesmore-resources.htmlId&quot;&gt;ID resource type&lt;a&gt;). Keys identified as belonging to the Android framework or not associated with any package will cause an {@link IllegalArgumentException} to be thrown." />
      <item value="Compat version of {@link java.util.function.Consumer} @param &lt;T&gt; the type of the input to the operation" />
      <item value="Window flag: hide all screen decorations (such as the status bar) while this window is displayed. This allows the window to use the entire display space for itself -- the status bar will be hidden when an app window with this flag set is on the top layer. A fullscreen window will ignore a value of {@link SOFT_INPUT_ADJUST_RESIZE} for the window's {@link softInputMode} field; the window will stay fullscreen and will not resize. &lt;p&gt;This flag can be controlled in your theme through the {@link android.R.attrwindowFullscreen} attribute; this attribute is automatically set for you in the standard fullscreen themes such as {@link android.R.styleTheme_NoTitleBar_Fullscreen}, {@link android.R.styleTheme_Black_NoTitleBar_Fullscreen}, {@link android.R.styleTheme_Light_NoTitleBar_Fullscreen}, {@link android.R.styleTheme_Holo_NoActionBar_Fullscreen}, {@link android.R.styleTheme_Holo_Light_NoActionBar_Fullscreen}, {@link android.R.styleTheme_DeviceDefault_NoActionBar_Fullscreen}, and {@link android.R.styleTheme_DeviceDefault_Light_NoActionBar_Fullscreen}.&lt;p&gt;" />
      <item value="Window flag: allow window to extend outside of the screen." />
      <item value="The window is always allowed to extend into the {@link DisplayCutout} areas on the short edges of the screen. The window will never extend into a {@link DisplayCutout} area on the long edges of the screen. &lt;p&gt; The window must make sure that no important content overlaps with the {@link DisplayCutout}. &lt;p&gt; In this mode, the window extends under cutouts on the short edge of the display in both portrait and landscape, regardless of whether the window is hiding the system bars:&lt;br&gt; &lt;img src=&quot;{@docRoot}referenceandroidimagesdisplay_cutoutshort_edgefullscreen_top_no_letterbox.png&quot; height=&quot;720&quot; alt=&quot;Screenshot of a fullscreen activity on a display with a cutout at the top edge in portrait, no letterbox is applied.&quot;&gt; &lt;img src=&quot;{@docRoot}referenceandroidimagesdisplay_cutoutshort_edgelandscape_top_no_letterbox.png&quot; width=&quot;720&quot; alt=&quot;Screenshot of an activity on a display with a cutout at the top edge in landscape, no letterbox is applied.&quot;&gt; &lt;p&gt; A cutout in the corner is considered to be on the short edge: &lt;br&gt; &lt;img src=&quot;{@docRoot}referenceandroidimagesdisplay_cutoutshort_edgefullscreen_corner_no_letterbox.png&quot; height=&quot;720&quot; alt=&quot;Screenshot of a fullscreen activity on a display with a cutout in the corner in portrait, no letterbox is applied.&quot;&gt; &lt;p&gt; On the other hand, should the cutout be on the long edge of the display, a letterbox will be applied such that the window does not extend into the cutout on either long edge: &lt;br&gt; &lt;img src=&quot;{@docRoot}referenceandroidimagesdisplay_cutoutshort_edgeportrait_side_letterbox.png&quot; height=&quot;720&quot; alt=&quot;Screenshot of an activity on a display with a cutout on the long edge in portrait, letterbox is applied.&quot;&gt;" />
      <item value="Q. &lt;p&gt; &lt;em&gt;Why? Why, to give you a taste of your future, a preview of things to come. Con permiso, Capitan. The hall is rented, the orchestra engaged. It's now time to see if you can dance.&lt;em&gt;" />
      <item value="Remove any pending posts of callbacks and sent messages whose &lt;var&gt;obj&lt;var&gt; is &lt;var&gt;token&lt;var&gt;. If &lt;var&gt;token&lt;var&gt; is null, all callbacks and messages will be removed." />
      <item value="Type is the common superinterface for all types in the Java programming language. These include raw types, parameterized types, array types, type variables and primitive types." />
      <item value="Returns a {@code double} value with a positive sign, greater than or equal to {@code 0.0} and less than {@code 1.0}. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range. &lt;p&gt;When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression &lt;blockquote&gt;{@code new java.util.Random()}&lt;blockquote&gt; This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else. &lt;p&gt;This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator. @return a pseudorandom {@code double} greater than or equal to {@code 0.0} and less than {@code 1.0}. @see RandomnextDouble()" />
      <item value="Rounding mode where positive values are rounded towards positive infinity and negative values towards negative infinity." />
      <item value="Rounding mode where positive values are rounded towards positive infinity and negative values towards negative infinity. @see RoundingModeUP" />
      <item value="Rounding mode to round towards negative infinity. For positive values this rounding mode behaves as {@link ROUND_DOWN}, for negative values as {@link ROUND_UP}." />
      <item value="Retrieve the current decor view, but only if it has already been created; otherwise returns null. @return Returns the top-level window decor or null. @see getDecorView" />
      <item value="Schedule the first layout -before- adding to the window manager, to make sure we do the relayout before receiving any other events from the system." />
      <item value="do this last because it fires off messages to start doing things" />
      <item value="Fill the DecorView in on any configuration changes that may have occured while it was removed from the WindowManager." />
      <item value="Start the dialog and display it on screen. The window is placed in the application layer and opaque. Note that you should not override this method to do initialization when the dialog is shown, instead implement that in {@link onStart}." />
      <item value="Destroy the child FragmentManager if we still have it here. This is normally done in performDestroy(), but is done here specifically if the Fragment is retained." />
      <item value="Check to see whether this activity is in the process of finishing, either because you called {@link finish} on it or someone else has requested that it finished. This is often used in {@link onPause} to determine whether the activity is simply pausing or completely finishing." />
      <item value="Indicates whether this View is currently in edit mode. A View is usually in edit mode when displayed within a developer tool. For instance, if this View is being drawn by a visual user interface builder, this method should return true. Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment. For instance: the class spawns a thread in its constructor, the drawing code relies on device-specific features, etc. This method is usually checked in the drawing code of custom widgets. @return True if this View is in edit mode, false otherwise." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="9" />
        <entry key="ENGLISH" value="10" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1651827064252" />
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="true" />
      </google-translate>
    </option>
  </component>
</application>